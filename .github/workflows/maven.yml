name: Build and Push Docker Image

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch
      
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 1: Set up JDK (Java Development Kit)
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'  # Specify the Java version you are using
        distribution: 'temurin'
        cache: maven

    
    # Step 2: Build the JAR file using Maven
    - name: Build the JAR using Maven
      run: mvn -B package --file pom.xml

    # Step 3: List contents of the target directory
    - name: List contents of target directory
      run: ls -l target/

    - name: Set read permissions for the JAR file
      run: chmod +r target/gs-maven-*.jar
  

    # Step 4: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 5: Build the Docker image using the correct JAR file
    - name: Build Docker image
      run: |
        docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/maven-java-app:latest .

    # Step 6: Push Docker image to Docker Hub
    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/maven-java-app:latest

    - name: Set up SSH using the PEM key stored in GitHub Secrets
      run: |
         mkdir -p ~/.ssh
         echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
         chmod 600 ~/.ssh/id_rsa
         ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: SSH to EC2 and deploy container
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/maven-java-app
        IMAGE_TAG: latest
      run: |
        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
        docker pull $IMAGE_NAME:$IMAGE_TAG
        docker run -d --name your-container-name -p 8080:8080 $IMAGE_NAME:$IMAGE_TAG
        EOF     
